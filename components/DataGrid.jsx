import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import styles from '../styles/Home.module.css';
import axios from 'axios';

// API ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßá‡¶§‡ßá ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
const fetchTransactions = async () => {
  const res = await axios.get('/api/transactions');
  return res.data; // ‡¶™‡ßÅ‡¶∞‡ßã JSON ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶π‡¶¨‡ßá
};

export default function DataGrid({ onEditClick }) {
  const queryClient = useQueryClient();

  // ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø mutation
  const deleteMutation = useMutation({
    mutationFn: (id) => axios.delete(`/api/transactions?id=${id}`),
    onSuccess: () => {
      queryClient.invalidateQueries(['transactions']);
      alert('‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!');
    },
    onError: (error) => {
      alert(`‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: ${error.response?.data?.message || error.message}`);
    },
  });

  // ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  const handleDelete = (id) => {
    if (confirm('‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®‡¶ü‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?')) {
      deleteMutation.mutate(id); // axios mutation ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
    }
  };

  // Query ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶°‡¶æ‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
  const { data, isLoading, error } = useQuery({
    queryKey: ['transactions'],
    queryFn: fetchTransactions,
  });

  if (isLoading) return <p>‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>;
  if (error) return <p>‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {error.message}</p>;

  // ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  const formatDate = (dateString) => {
    const options = { day: '2-digit', month: 'short', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true };
    return new Intl.DateTimeFormat('en-US', options).format(new Date(dateString));
  };

  // ‡¶Æ‡ßã‡¶ü ‡¶ú‡¶Æ‡¶æ, ‡¶Æ‡ßã‡¶ü ‡¶ñ‡¶∞‡¶ö, ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶ü
  const totalDeposit = data.result.reduce((acc, item) => acc + (item.deposit_amount || 0), 0);
  const totalWithdraw = data.result.reduce((acc, item) => acc + (item.withdraw_amount || 0), 0);
  const balance = totalDeposit - totalWithdraw;

  return (
    <div>
      <div className={styles.summary}>
        <p>‡¶Æ‡ßã‡¶ü ‡¶ú‡¶Æ‡¶æ: {totalDeposit}</p>
        <p>‡¶Æ‡ßã‡¶ü ‡¶ñ‡¶∞‡¶ö: {totalWithdraw}</p>
        <p>‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {balance}</p>
      </div>
      
      <table className={styles.table}>
        <thead>
          <tr>
            <th>‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∞</th>
            <th>‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</th>
            <th>‡¶¨‡¶ø‡¶¨‡¶∞‡¶£</th>
            <th>‡¶ú‡¶Æ‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£</th>
            <th>‡¶ñ‡¶∞‡¶ö‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£</th>
            <th>‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ</th>
            <th>‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®</th>
          </tr>
        </thead>
        <tbody>
          {data.result.map((item) => (
            <tr key={item.id}>
              <td>{item.transaction_type}</td>
              <td>{formatDate(item.transaction_date)}</td>
              <td>{item.description}</td>
              <td>{item.deposit_amount}</td>
              <td>{item.withdraw_amount}</td>
              <td>
                <button onClick={() => onEditClick(item)}>‚úèÔ∏è</button>
              </td>
              <td>
                <button onClick={() => handleDelete(item.id)}>üóëÔ∏è</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
